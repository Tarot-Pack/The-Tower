[manifest]
version = "1.0.0"
dump_lua = true
priority = 999

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''card_eval_status_text(scored_card, 'jokers', nil, percent, nil, {message = localize{type='variable',key= amount > 0 and 'a_xmult' or 'a_xmult_minus',vars={amount}}, Xmult_mod =  amount, colour =  G.C.EDITION, edition = true})'''
position = "at"
payload = '''
card_eval_status_text(scored_card, 'jokers', nil, percent, nil, {message = localize{type='variable',key= to_big(amount) > to_big(0) and 'a_xmult' or 'a_xmult_minus',vars={amount}}, Xmult_mod =  amount, colour =  G.C.EDITION, edition = true})
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/button_callbacks.lua'''
pattern = '''if card.ability.set == 'Booster' and not nosave and G.STATE == G.STATES.SHOP then'''
position = "before"
payload = '''
if card.ability.consumeable then
    SMODS.calculate_context({ tower_before_consumable_used = true, consumeable = card, area = card.from_area })
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''local available_rarities = copy_table(SMODS.ObjectTypes[_pool_key].rarities)'''
position = "after"
payload = '''
available_rarities = available_rarities or {}
'''
match_indent = true



[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''if obj and obj.set_badges and type(obj.set_badges) == 'function' then'''
position = "before"
payload = '''
if (card.ability and card.ability.set == "Joker") and 
((not ((G.GAME and G.GAME.tower_global_joker_invert) or false) and (card.ability and card.ability.tower_joker_invert))
or (((G.GAME and G.GAME.tower_global_joker_invert) or false) and (not ((card.ability and card.ability.tower_joker_invert) or false)))) then
    badges[#badges+1] = create_badge(localize('k_tower_inverted'), Tower.ChipMultGrad, nil, 1 )
    loc_vars = loc_vars or {}
    loc_vars.tower_joker_invert = true
end'''
match_indent = true


[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "lib/calculate.lua"]'''
pattern = '''if G.jokers.cards[i].ability.cry_rigged then
    G.GAME.probabilities.normal = 1e9
end'''
position = "before"
payload = '''
if next(find_joker('tower-forgotten_die')) and (G.jokers.cards[i].ability.tower_forgotten_choice == nil) then
    G.jokers.cards[i].ability.tower_forgotten_choice = pseudorandom(pseudoseed('forgotten_die')) > 0.5
elseif not (next(find_joker('tower-forgotten_die'))) then
    G.jokers.cards[i].ability.tower_forgotten_choice = nil
end
if G.jokers.cards[i].ability.tower_forgotten_choice ~= nil then
    if G.jokers.cards[i].ability.tower_forgotten_choice then
        G.GAME.probabilities.normal = 1e9
    else
        G.GAME.probabilities.normal = 0
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "lib/calculate.lua"]'''
pattern = '''if G.jokers.cards[i].ability.cry_rigged then
    G.GAME.probabilities.normal = ggpn
end'''
position = "before"
payload = '''
if G.jokers.cards[i].ability.tower_forgotten_choice ~= nil then
    G.GAME.probabilities.normal = ggpn
end'''
match_indent = true



[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "lib/calculate.lua"]'''
pattern = '''if card.ability.cry_rigged then
    G.GAME.probabilities.normal = 1e9
end'''
position = "before"
payload = '''
if next(find_joker('tower-forgotten_die')) and (card.ability.tower_forgotten_choice == nil) then
    card.ability.tower_forgotten_choice = pseudorandom(pseudoseed('forgotten_die')) > 0.5
elseif not (next(find_joker('tower-forgotten_die'))) then
    card.ability.tower_forgotten_choice = nil
end
if card.ability.tower_forgotten_choice ~= nil then
    if card.ability.tower_forgotten_choice then
        G.GAME.probabilities.normal = 1e9
    else
        G.GAME.probabilities.normal = 0
    end
end'''
match_indent = true


[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "lib/calculate.lua"]'''
pattern = '''if card.ability.cry_rigged then
    G.GAME.probabilities.normal = ggpn
end'''
position = "before"
payload = '''
if card.ability.tower_forgotten_choice ~= nil then
    G.GAME.probabilities.normal = ggpn
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "lib/calculate.lua"]'''
pattern = '''if active_side.ability.cry_rigged then
    G.GAME.probabilities.normal = 1e9
end'''
position = "before"
payload = '''
if next(find_joker('tower-forgotten_die')) and (active_side.ability.tower_forgotten_choice == nil) then
    active_side.ability.tower_forgotten_choice = pseudorandom(pseudoseed('forgotten_die')) > 0.5
elseif not (next(find_joker('tower-forgotten_die'))) then
    active_side.ability.tower_forgotten_choice = nil
end
if active_side.ability.tower_forgotten_choice ~= nil then
    if active_side.ability.tower_forgotten_choice then
        G.GAME.probabilities.normal = 1e9
    else
        G.GAME.probabilities.normal = 0
    end
end'''
match_indent = true


[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "lib/calculate.lua"]'''
pattern = '''if active_side.ability.cry_rigged then
    G.GAME.probabilities.normal = ggpn
end'''
position = "before"
payload = '''
if active_side.ability.tower_forgotten_choice ~= nil then
    G.GAME.probabilities.normal = ggpn
end'''
match_indent = true


[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "lib/calculate.lua"]'''
pattern = '''if G.jokers.cards[j].ability.cry_rigged then
    G.GAME.probabilities.normal = 1e9
end'''
position = "before"
payload = '''
if next(find_joker('tower-forgotten_die')) and (G.jokers.cards[j].ability.tower_forgotten_choice == nil) then
    G.jokers.cards[j].ability.tower_forgotten_choice = pseudorandom(pseudoseed('forgotten_die')) > 0.5
elseif not (next(find_joker('tower-forgotten_die'))) then
    G.jokers.cards[j].ability.tower_forgotten_choice = nil
end
if G.jokers.cards[i].ability.tower_forgotten_choice ~= nil then
    if G.jokers.cards[j].ability.tower_forgotten_choice then
        G.GAME.probabilities.normal = 1e9
    else
        G.GAME.probabilities.normal = 0
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "lib/calculate.lua"]'''
pattern = '''if G.jokers.cards[j].ability.cry_rigged then
    G.GAME.probabilities.normal = ggpn
end'''
position = "before"
payload = '''
if G.jokers.cards[j].ability.tower_forgotten_choice ~= nil then
    G.GAME.probabilities.normal = ggpn
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/UI_definitions.lua'''
pattern = '''if obj and obj.set_badges and type(obj.set_badges) == 'function' then'''
position = "before"
payload = '''
if card.ability and card.ability.immutable.tower_force_gameset then
    badges[#badges+1] = create_badge(localize('cry_gameset_' .. (card.ability.immutable.tower_force_gameset)), G.C.CRY_GREENGRADIENT, nil, 1.2 )
end
if card.ability and card.ability.immutable.tower_empowered then
    badges[#badges+1] = create_badge(localize({ type = "variable", key = "tower_empowered_level", vars = { Tower.ToRoman(card.ability.immutable.tower_empowered) } }), Tower.EmpoweredColour, nil, 1 )
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS Cryptid "lib/gameset.lua"]'''
pattern = '''if card.force_gameset then'''
position = "before"
payload = '''
if card.ability and card.ability.immutable and card.ability.immutable.tower_force_gameset then
    return card.tower_force_gameset
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/card_draw.lua"]'''
pattern = '''elseif self.children.floating_sprite then'''
position = "after"
payload = '''
self.children.floating_sprite:set_sprite_pos(self.config.center.soul_pos)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS entr "lib/hooks.lua"]'''
pattern = '''if self.config.center.tsoul_pos then'''
position = "after"
payload = '''
self.children.floating_sprite:set_sprite_pos(self.config.center.tsoul_pos);
if self.config.center.tsoul_pos.extra then
    self.children.floating_sprite2:set_sprite_pos(self.config.center.tsoul_pos.extra);
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/game_object.lua"]'''
pattern = '''if not card then'''
position = "before"
payload = '''local TOWER_IS_FAKE_CARD = not card'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/common_events.lua'''
pattern = "local info_queue = {}"
position = "after"
payload = '''
if G.GAME and G.GAME.banned_keys and G.GAME.banned_keys[_c.key] and Tower.Config.show_banned then
    if desc_nodes == full_UI_table.main and not full_UI_table.name then
        info_queue[#info_queue+1] = G.P_CENTERS.desc_tower_banned_card
    else
        G.TOWER_BANNED_OVERRIDE_DESC = true
    end
end'''
match_indent = true


[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "function localize(args, misc_cat)"
position = "after"
payload = '''
if G.TOWER_BANNED_OVERRIDE_DESC and args.type == "descriptions" then
    G.TOWER_BANNED_OVERRIDE_DESC = false
    args.set = G.P_CENTERS.desc_tower_banned_card.set
    args.key = G.P_CENTERS.desc_tower_banned_card.key
end
'''
match_indent = true
[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "    local stake_sprite = get_stake_sprite(G.GAME.stake or 1, 0.5)"
position = "at"
payload = '''
    local stake_sprite = get_stake_sprite(G.GAME.stake or 1, 0.5, true)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''  local scale = 0.4
  local stake_sprite = get_stake_sprite(G.GAME.stake or 1, 0.5)'''
position = "at"
payload = '''  local scale = 0.4
  local stake_sprite = get_stake_sprite(G.GAME.stake or 1, 0.5, true)'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''    local scale = 0.4
    local stake_sprite = get_stake_sprite(G.GAME.stake or 1, 0.5)'''
position = "at"
payload = '''    local scale = 0.4
    local stake_sprite = get_stake_sprite(G.GAME.stake or 1, 0.5, true)'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local extras = nil
  local stake_sprite = get_stake_sprite(G.GAME.stake or 1, 0.5)'''
position = "at"
payload = '''local extras = nil
  local stake_sprite = get_stake_sprite(G.GAME.stake or 1, 0.5, true)'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local stake_sprite = get_stake_sprite(G.GAME.stake or 1, 0.4)'''
position = "at"
payload = '''local stake_sprite = get_stake_sprite(G.GAME.stake or 1, 0.4, true)'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''local stake_sprite = get_stake_sprite(G.GAME.stake or 1, 0.5)'''
position = "at"
payload = '''local stake_sprite = get_stake_sprite(G.GAME.stake or 1, 0.5, true)'''
match_indent = true

[[patches]]
[patches.regex]
target = "functions/state_events.lua"
pattern = "check_for_unlock\\(\\{type = 'ante_up', ante = G\\.GAME\\.round_resets\\.ante \\+ 1\\}\\)"
position = "after"
payload = '''
if G.GAME.modifiers.tower_ultra_scaling and G.GAME.tower_best_score ~= nil then
  G.GAME.modifiers.tower_ante_scaling = math.T_pow(G.GAME.tower_best_score, G.GAME.tower_best_score)
end
'''

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "new_shop_card:juice_up()"
position = "at"
payload = '''
if new_shop_card then
    new_shop_card:juice_up()
end
'''
match_indent = true